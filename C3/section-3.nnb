{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "## Functions\r\n\r\nThe concept of wrapping a piece of program in a value (What a beautiful explanation), it has many uses, It gives us a way to structure larger programs, to reduce repetition, to associate names with subprograms, and to isolate these subprograms from each other.\r\n\r\nTIP: Also note that functions can be expressions too!\r\n\r\nFunctions can also contain side effects that's not a suitable style for coding, wrapping a piece of code for a kind of purpose and then having side effects along side my cause many problems.\r\n\r\nTIP: Functions have their own little world that make them speicial, Their own *Variables*, *Execution Context* or Frankly speaking their own **Scope**.\r\n\r\nTIP: JS Engine treat Functions scope in a term called *Lexical Scoping*, it'll search the most inner called scope then makes it way to outside it cannot access the inner scope where it didn't called "
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function outer(i) { // don't have access neither to j nor to k\r\n  let a = 10; console.log(c) // it cannot access the inner *nest* function but outer window\r\n  function inner(j) { // only access i\r\n    let b = 20;\r\n    function nest(k) { // has access to i,j bindings\r\n      let c = 30;\r\n      console.log(a); // it will search all the way to the outer functions\r\n    }\r\n  }\r\n}"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "Functions are mainly defined in two variations, Functions Declaration and Expression, the first one is when you define block of code without assigning it to any bindings the latter one is when you do reverse"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Declaration\r\nfunction meow() {\r\n  // sth...\r\n}\r\n\r\n// Anonymous Function Declaration\r\n(function(a, b){\r\n  // do sth with a, b\r\n}(2, 3));\r\n\r\n// Expression\r\nconst meowcho = function() {\r\n  // sth\r\n}\r\n\r\nconst meowchoAnonymous = () => {\r\n  // sth\r\n}"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "The main differences between these two are:\r\n\r\n1. Expressions only hoist the binding not the value(the actual block of code) Vs. Declarations hoist all the code to the top alongside all the code block and bindings inside of it.\r\n2. Expressions are able to create anonymous functions (fn without name) while Declarations can't\r\n\r\nThere's also an exception that we can declare functions declaration while it's anonymous, IIFE functions, this type of functions are callled as soon as the parser reach them instead of skipping the like other type of functions."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Closures\r\nThe ability to treat functions as values, combined with the fact that local bindings are re-created every time a function is called Closure"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function wrapValue(n) {\r\n  let local = n;\r\n  return () => local;\r\n}\r\nlet wrap1 = wrapValue(1);\r\nlet wrap2 = wrapValue(2);\r\nconsole.log(wrap1());\r\n// → 1\r\nconsole.log(wrap2());\r\n// → 2"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "1",
                                "2",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "This feature—being able to reference a specific instance of a local binding in an enclosing scope—is called closure. A function that references bindings from local scopes around it is called a closure.\r\n\r\nThe whole idea behind the closures is that when we save *wrapValue* into the *wrap1* the *wrapValue* returnes a function, and you even might not think about it that what happens to the *wrapValue* bindings like *local* ? when the returned value needs it to be able to function correctly, hmmm the Engine keeps it alive so the *wrap1* can still access it.\r\n\r\nA good mental model is to think of function values as containing both the code in their body and the environment in which they are created. When called, the function body sees the environment in which it was created, not the environment in which it is called (another beautiful explanation)"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Recursion\r\n\r\nIt is perfectly okay for a function to call itself, as long as it doesn’t do it so often that it overflows the stack. A function that calls itself is called recursive.\r\n\r\nRecursions are mainly created with two parts, *base case* and the *recursion* itself"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34\r\nfunction fibo(i) {\r\n  if (i === 1) return 0\r\n  if (i < 3) return 1\r\n\r\n  return fibo(i - 1) + fibo(i - 2);\r\n}\r\n\r\nconsole.log(fibo(8));"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "13",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "The only downside of using *Recursions* is performance, these beautiful creatures are three time slower than a regular loop, but performance is not a problem when complexity grows.\r\n\r\nWorrying about efficiency can be a distraction. It’s yet another factor that complicates program design, and when you’re doing something that’s already difficult, that extra thing to worry about can be paralyzing.\r\n\r\nThere are certian ways to optimize recusives, like *memoization* that sacrifices more memory for faster calculations"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Memoization in action\r\n// lets optimze or fibo function\r\nfunction fibo(i, memo = { 1: 0, 2: 1 }) {\r\n  if (i in memo) {\r\n    return memo[i];\r\n  }\r\n\r\n  memo[i] = fibo(i - 1, memo) + fibo(i - 2, memo);\r\n  return memo[i];\r\n}\r\n\r\nconsole.log(fibo(8));"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "function findSolution(target) {\r\n  function find(current, history) {\r\n    if (current == target) {\r\n      return history;\r\n    } else if (current > target) {\r\n      return null;\r\n    } else {\r\n      return find(current + 5, `(${history} + 5)`) ??\r\n      find(current * 3, `(${history} * 3)`);\r\n    }\r\n  }\r\n  \r\n  return find(1, \"1\");\r\n}\r\nconsole.log(findSolution(36));\r\n// → (((1 * 3) + 5) * 3)\r\n  "
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "(((((((1 + 5) + 5) + 5) + 5) + 5) + 5) + 5)",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Write a functions that takes to parameters first a number indicating number of farm animals and\r\n// animal name as second parameter, the number must be padded with zeros if it's less than 100\r\n\r\n// test: 7 => 007, 18 => 018\r\n\r\nfunction paddZeros(n, name) {\r\n  let output = `${n}`;\r\n\r\n  if (output.length < 3) {\r\n    output = `${name}: ${\"0\".repeat(3 - output.length) + output}`;\r\n  } else {\r\n    output = `${name}: ${output}`;\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\npaddZeros(12, \"cows\")"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'cows: 012'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "It's not necessary to always wrap some code into functions, the book also covers this whith yet another beautiful explanation:\r\n\r\n> A useful principle is to refrain from adding cleverness unless you are absolutely sure you’re going to need it. It can be tempting to write general “frameworks” for every bit of functionality you come across. Resist that urge. You won’t get any real work done—you’ll be too busy writing code that you never use.\r\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Let's do a little challenge\r\n// Write a function that will padd zeors to left without using string methods\r\n\r\nfunction paddLeft(x, n) {\r\n  // x = max figures, n = number\r\n  let output = \"\";\r\n  for (let i = 0; i < n - `${x}`.length; i += 1) output += \"0\"\r\n  return `${output}${x}`;\r\n}\r\n\r\npaddLeft(23, 4)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[32m'0023'\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "## Exercises\r\n\r\nThe exercises also contain some bonus ones, those that caclulated with single line of code or O(1) are equipped with *Numbers Theory* fomulas."
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "// Minumum\r\n\r\nfunction min(n1, n2) {\r\n  let k = Math.abs(n1 - n2);\r\n  return ((n1 + n2) - k) / 2\r\n}\r\n\r\nlet sets = [[1, 2], [7, 9], [14, -3], [22, 77]].map((arr) => min(arr[0], arr[1]));\r\nconsole.log(sets);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 1, 7, -3, 22 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Maximum of two numbers (Bonus)\r\n\r\nfunction max(n1, n2) {\r\n  let k = Math.abs(n1 - n2);\r\n  return ((n1 + n2) + k) / 2\r\n}\r\n\r\nlet sets = [[1, 2], [7, 9], [14, -3], [22, 77]].map((arr) => max(arr[0], arr[1]));\r\nconsole.log(sets);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "[ 2, 9, 14, 77 ]",
                                "",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// let's make it a little more challenging\r\n// write a function that will return min of an array of numbers\r\n\r\nfunction arrMin(arr) {\r\n  let min = Infinity;\r\n  arr.map((el) => {\r\n    if (el < min) min = el\r\n  });\r\n  return min;\r\n}\r\n\r\narrMin([1, 2, 7, 9, 14, -3, 22, 77]);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m-3\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Write a function to calculate the sum of numbers from 1 to provided number (n)\r\n// Example: n = 5, 1, 2, 3, 4, 5 => 15\r\n\r\nfunction sum(n) {\r\n  return (n * (1 + n)) / 2;\r\n}\r\n\r\nsum(5)"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m15\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Define a function that returns True if a number is Even otherwise False using Recursion\r\n\r\nfunction isEven(n) {\r\n  if (n < 0) return isEven(-n);\r\n  if (n === 0) return true\r\n  if (n === 1) return false\r\n\r\n  return isEven(n - 2);\r\n}\r\n\r\nisEven(-2);"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33mtrue\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// Bean counting\r\nfunction countBs(str) {\r\n  let output = 0;\r\n\r\n  for (let i = 0; i < str.length; i += 1) {\r\n    if (str[i] === \"b\") output += 1;\r\n  }\r\n\r\n  return output\r\n}\r\n\r\ncountBs(\"bajaslkfjaslkbbblasjf;labbb\");"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m7\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "typescript",
            "source": [
                "// write a function that takes two strings, first argument must be a string to search second arg inside of it\r\n// This ain't easy\r\n\r\n// TEST\r\n// searchBs(a brown fox jumped over brown fox, fox) => 2, there's two \"fox\" in the provided text\r\nfunction searchTxt(str, find) {\r\n  let count = 0;\r\n\r\n  for (let i = 0; i < str.length; i += 1) {\r\n    let word = \"\";\r\n    for (let j = 0; j < find.length; j += 1) {\r\n      if (str[i + j] === find[j]) word += str[i + j];\r\n      if (word === find) count += 1;\r\n    }\r\n  }\r\n\r\n  return count;\r\n}\r\n\r\nsearchTxt(\"a brown fox jumped over an orange green fox\", \"fox\");"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "",
                                ""
                            ]
                        }
                    ]
                },
                {
                    "items": [
                        {
                            "mime": "text/plain",
                            "value": [
                                "\u001b[33m2\u001b[39m"
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}